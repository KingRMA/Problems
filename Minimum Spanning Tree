#include <bits/stdc++.h>
typedef long long ll;
using namespace std;



class DSU {
public:
    vector<int> parent, size;

    DSU(int n) {
        parent.resize(n);
        size.resize(n, 1);  // Each set starts with size 1
        for (int i = 0; i < n; i++) parent[i] = i;
    }

    // Find with path compression
    int find(int v) {
        if (parent[v] != v)
            parent[v] = find(parent[v]); // Path compression
        return parent[v];
    }

    // Union by size
    bool unite(int a, int b) {
        a = find(a);
        b = find(b);
        if (a == b) return false;  // Already in the same component
        if (size[a] < size[b]) swap(a, b);
        parent[b] = a;
        size[a] += size[b];
        return true;
    }

    // Returns the size of the set containing v
    int getSize(int v) {
        return size[find(v)];
    }
};

int kruskal(int n, vector<tuple<int, int, int>> &edges)
{
    sort(edges.begin(), edges.end());  // Sort edges by weight
    DSU dsu(n);
    int mst_weight = 0, edges_used = 0;

    for (auto &[w, u, v] : edges) {
        if (dsu.unite(u, v)) {  // If edge is added to MST
            mst_weight += w;
            edges_used++;
            if (edges_used == n - 1) break;  // MST complete
        }
    }
    return (edges_used == n - 1) ? mst_weight : -1;  // -1 if MST not possible
}

int main()
{

        int n, m;
        cin >> n >> m;


        vector<tuple<int, int, int>> edges;



        for (int i = 0; i < m; ++i)
        {
            int u, v, w;

            cin >> u >> v >> w;
            u--;v--;

            edges.emplace_back(w, u, v);

        }


        int res = kruskal(n, edges);

        cout << res << "\n";





    return 0;
}

/*
4 5
1 2 10
2 3 15
1 3 5
4 2 2
4 3 40



 */
