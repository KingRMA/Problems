#include <bits/stdc++.h>
using namespace std;



pair<int, int> bfs(int src, vector<vector<int>>&adj)
{
    int n = adj.size();
    const int INF = 1e9;
    vector <int> dist(n, INF);
    queue <int> q;
    q.push(src);
    dist[src] = 0;

    int mx = 0, idx;

    while(!q.empty())
    {
        int u = q.front();
        q.pop();
        for(int v : adj[u])
        {
            if(dist[v] == INF)
            {
                dist[v] = dist[u] + 1;
                q.push(v);
                if(dist[v] > mx)
                {
                    mx = dist[v];
                    idx = v;
                }
            }
        }
    }

    return make_pair(idx, mx);
}

int main()
{
    int n;
    cin >> n;
    vector <vector<int>> adj(n);
    for (int i = 0; i < n-1; ++i)
    {
        int temp1, temp2;
        cin >> temp1 >> temp2;
        adj[temp1-1].push_back(temp2-1);
        adj[temp2-1].push_back(temp1-1);
    }

    pair<int, int> temp, res;
    temp = bfs(0, adj);
    res = bfs(temp.first, adj);

    cout << res.second << "\n";
    return 0;
}
