#include <bits/stdc++.h>
using namespace std;

const int INF = 1e9;
int n;
vector<int> v;
vector<vector<int>> dp;

int getSum(int start, int end)
{
    int sum = 0;
    for (int i = start; i <= end; i++)    sum += v[i];

    return sum % 100;
}

int solve(int l, int r)
{
    if (l == r) return 0;

    if (dp[l][r] != -1) return dp[l][r];

    int newRes = INF;
    for (int i = l; i < r; i++)
    {
        int leftSum = getSum(l, i);
        int rightSum = getSum(i + 1, r);
        int smoke = leftSum * rightSum;
        newRes = min(newRes, (smoke + solve(l, i) + solve(i + 1, r)));
    }
    return dp[l][r] = newRes;
}

int main() 
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);

    while (cin >> n) 
    {
        v.resize(n);
        for (int i = 0; i < n; i++) cin >> v[i];
        dp = vector<vector<int>>(n + 1, vector<int>(n + 1, -1));

        cout << solve(0, n - 1) << '\n';
    }

    return 0;
}
