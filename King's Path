#include <bits/stdc++.h>
typedef long long ll;
using namespace std;

bool valid(ll row, ll column, vector<pair<int, pair<int, int>>>&allowedCells)
{

}

int dx[8]={0, 0, 1, -1, 1, -1, -1, 1};
int dy[8]={1, -1, 0, 0, 1, -1, 1, -1};

int bfs(int srcX, int srcY, int tarX, int tarY, set<pair<int,int>>&valid)
{
    map<pair<int, int>, int> dist;
    queue<pair<int, int>> q;
    q.emplace(srcX, srcY);
    while(!q.empty())
    {
        int x = q.front().first, y = q.front().second;
        q.pop();
        if(x == tarX && y == tarY) return dist[{x, y}];
        for(int i = 0; i < 8; i++)
        {
            int nx = x + dx[i], ny = y + dy[i];
            if(valid.count({nx, ny}) && dist[{nx,ny}] == 0)
            {
                dist[{nx, ny}] = dist[{x, y}] + 1;
                q.emplace(nx, ny);
            }
        }
    }
    return -1;
}


int main()
{

    int startX, startY, endX, endY;
    cin >> startX >> startY >> endX >> endY;
    startX--;
    startY--;
    endX--;
    endY--;
    
    int n;
    cin >> n;
    set<pair<int, int>>valid;

    while(n--)
    {
        int r, c1, c2;
        cin >> r >> c1 >> c2;
        for(int i = c1; i <= c2; i++) valid.insert({r-1, i-1});
    }
    cout << bfs(startX, startY, endX, endY, valid) << "\n";

    return 0;
}

/*
5 7 6 11
3
5 3 8
6 7 11
5 2 5
 
 //written with the coach in the session
 */
