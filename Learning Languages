#include <bits/stdc++.h>
typedef long long ll;
using namespace std;



class DSU {
public:
    unordered_map<int, int> parent, size;

    // Initialize with some nodes
    DSU(int n) {
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    int find(int v) {
        if (parent[v] != v)
            parent[v] = find(parent[v]);  // Path compression
        return parent[v];
    }

    bool unite(int a, int b) {
        a = find(a);
        b = find(b);
        if (a == b) return false;  // Already in the same component
        if (size[a] < size[b]) swap(a, b);
        parent[b] = a;
        size[a] += size[b];
        return true;
    }

    void addNode(int newNode) {
        if (parent.find(newNode) == parent.end()) { // Only add if it doesn't exist
            parent[newNode] = newNode;
            size[newNode] = 1;
        }
    }

    int countComponents() {
        unordered_set<int> uniqueParents;
        for (auto &[node, par] : parent) {
            uniqueParents.insert(find(node));
        }
        return uniqueParents.size();
    }
};


int kruskal(int n, vector<tuple<int, int, int>> &edges)
{
    sort(edges.begin(), edges.end());  // Sort edges by weight
    DSU dsu(n);
    int mst_weight = 0, edges_used = 0;

    for (auto &[w, u, v] : edges) {
        if (dsu.unite(u, v)) {  // If edge is added to MST
            mst_weight += w;
            edges_used++;
            if (edges_used == n - 1) break;  // MST complete
        }
    }
    return (edges_used == n - 1) ? mst_weight : -1;  // -1 if MST not possible
}


int main()
{


    int n, m, dumbs = 0;
    cin >> n >> m;

    DSU dsu(n+m);
    bool allIlliterate = true;

    for (int i = 0; i < n; i++)
    {
        int numberOfLangs;
        cin >> numberOfLangs;

        if (numberOfLangs > 0) allIlliterate = false;

        while (numberOfLangs--)
        {
            int temp;
            cin >> temp;

            dsu.unite(i, n + temp - 1);



        }

    }

    if(allIlliterate)   cout << n << "\n";
    else
    {

        unordered_set<int> comp;
        for (int i = 0; i < n; i++) {
            comp.insert(dsu.find(i));
        }
        cout << (int)comp.size() - 1 << "\n";
    }












    return 0;
}

/*
4 5
1 2 10
2 3 15
1 3 5
4 2 2
4 3 40



 */
