#include <bits/stdc++.h>
typedef long long ll;
using namespace std;



class DSU {
public:
    vector<int> parent, size;

    DSU(int n) {
        parent.resize(n);
        size.resize(n, 1);  // Each set starts with size 1
        for (int i = 0; i < n; i++) parent[i] = i;
    }

    // Find with path compression
    int find(int v) {
        if (parent[v] != v)
            parent[v] = find(parent[v]); // Path compression
        return parent[v];
    }

    // Union by size
    bool unite(int a, int b) {
        a = find(a);
        b = find(b);
        if (a == b) return false;  // Already in the same component
        if (size[a] < size[b]) swap(a, b);
        parent[b] = a;
        size[a] += size[b];
        return true;
    }

    // Returns the size of the set containing v
    int getSize(int v) {
        return size[find(v)];
    }
};

int main()
{
    int t;
    cin >> t;

    while (t--)
    {
        int n, m, res = 1;
        cin >> n >> m;

        DSU dsu(n+1);


        for (int i = 0; i < m; ++i)
        {
            int u, v;

            cin >> u >> v;

            dsu.unite(u, v);

            res = max(res, dsu.getSize(u));

        }

//        for (int i = 0; i < n; ++i) res = max(res, dsu.getSize(i));

        cout << res << "\n";



    }


    return 0;
}

/*
2
3 2
1 2
2 3
10 12
1 2
3 1
3 4
5 4
3 5
4 6
5 2
2 1
7 1
1 2
9 10
8 9

 */
