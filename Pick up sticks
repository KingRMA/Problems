#include <bits/stdc++.h>
typedef long long ll;
using namespace std;

int cycle;
vector<int> res;
void dfs(int u, vector<int>&vis, vector<vector<int>>&adj)
{
    vis[u] = 1;

    for(int v: adj[u])
        if(vis[v] == 0) dfs(v, vis, adj);
        else if(vis[v] == 1) cycle = 1;

    vis[u] = 2;
    res.push_back(u+1);
}

int main()
{

    int n, m;

    while(cin >> n >> m, n || m)
    {
        vector<vector<int>> adj(n);
        vector<int> vis(n);
        while(m--)
        {
            int u, v;
            cin >> u >> v;
            adj[--u].push_back(--v);
        }



    for (int i = 0; i < n; ++i)
    {
        if(vis[i] == 0 && cycle == 0) dfs(i, vis, adj);
    }

    if(cycle) cout << "IMPOSSIBLE" << "\n";
    else
    {
        reverse(res.begin(), res.end());
        for(auto i : res) cout << i << "\n";
    }
        res.clear();
        cycle = 0;


}




    return 0;
}
/*
3 2
1 2
2 3
0 0

 */

//ALT SOLUTION:


#include <bits/stdc++.h>
typedef long long ll;
using namespace std;

vector<int> topology_sort(vector<vector<int>>&adj, vector <int>&indegree)
{
    int n = adj.size();
    queue <int> q;
    for(int u = 0; u < n; u++)  if(indegree[u] == 0)    q.push(u);

    vector<int> topological_sort;
    while(!q.empty())
    {
        int u = q.front();
        q.pop();
        topological_sort.push_back(u);
        for(int v : adj[u])
        {
            indegree[v]--;
            if(indegree[v] == 0)    q.push(v);
        }
    }
    return topological_sort;
}

int main()
{
    int n, m;
    while(cin >> n >> m && (n != 0 || m != 0))
    {
        vector<vector<int>> adj(n);
        vector <int> indegree(n, 0);
        for(int i = 0; i < m; i++)
        {
            int u, d;
            cin >> u >> d;
            adj[--u].push_back(--d);
            indegree[d]++;
        }

        vector<int> v = topology_sort(adj, indegree);

        if(v.size() != n) cout << "IMPOSSIBLE" << "\n";
        else for(auto i : v) cout << i + 1 << "\n";
    }

    return 0;
}
/*
3 2
1 2
2 3
0 0
 */
