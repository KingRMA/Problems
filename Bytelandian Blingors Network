#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

struct DSU {
    vector<ll> parent, size;

    DSU(ll n) {
        parent.resize(n);
        size.assign(n, 1);
        iota(parent.begin(), parent.end(), 0);
    }

    ll find(ll v) {
        if (parent[v] != v)
            parent[v] = find(parent[v]);  // Path compression
        return parent[v];
    }

    bool unite(ll a, ll b) {
        a = find(a), b = find(b);
        if (a == b) return false;
        if (size[a] < size[b]) swap(a, b);
        parent[b] = a;
        size[a] += size[b];
        return true;
    }
};

struct Edge {
    ll w, u, v;
    bool operator<(const Edge &other) const {
        return w < other.w;
    }
};

ll kruskal(ll n, vector<Edge> &edges) {
    sort(edges.begin(), edges.end());  // Sort edges by weight
    DSU dsu(n);
    ll mst_weight = 0, edges_used = 0;

    for (auto &[w, u, v] : edges) {
        if (dsu.unite(u, v)) {  // If edge is added to MST
            mst_weight += w;
            edges_used++;
            if (edges_used == n - 1) break;  // MST complete
        }
    }
    return (edges_used == n - 1) ? mst_weight : -1;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    ll t; cin >> t;

    while (t--) {
        ll n; cin >> n;
        cin.ignore();

        map<string, ll> nodeId;
        vector<Edge> edges;
        ll nodeCount = 0;

        for (ll i = 0; i < n; i++) {
            string name;
            cin >> name;

            if (nodeId.find(name) == nodeId.end()) {
                nodeId[name] = nodeCount++;
            }
            ll u = nodeId[name];

            ll m; cin >> m;
            while (m--) {
                ll v, w;
                cin >> v >> w;
                v--;

                edges.push_back({w, u, v});
            }
            cin.ignore();
        }

        cout << kruskal(nodeCount, edges) << "\n";
    }

    return 0;
}
