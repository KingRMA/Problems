#include <bits/stdc++.h>
typedef long long ll;
using namespace std;

void dfs(int v, vector<vector<int>>& adj, vector<bool>& vis, vector<int>& dist, int depth)
{
    vis[v] = true;
    dist[v] = depth;

    for (int u : adj[v])    if (!vis[u])    dfs(u, adj, vis, dist, depth + 1);


}

int main() {
    int n, m;
    cin >> n >> m;

    vector<vector<int>> adj(n);
    for (int i = 0; i < m; ++i)
    {
        int temp1, temp2;
        cin >> temp1 >> temp2;
        adj[temp1 - 1].push_back(temp2 - 1);
        adj[temp2 - 1].push_back(temp1 - 1);
    }

    vector<bool> vis(n, false);
    vector<int> dist(n, 0);

    dfs(0, adj, vis, dist, 0);

    int mx = max_element(dist.begin(), dist.end()) - dist.begin();

    fill(vis.begin(), vis.end(), false);//bruh
    fill(dist.begin(), dist.end(), 0);//bruh

    dfs(mx, adj, vis, dist, 0);

    int res = *max_element(dist.begin(), dist.end());

    cout << res << endl;

    return 0;
}
