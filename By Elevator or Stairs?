#include <bits/stdc++.h>
typedef long long ll;
using namespace std;

int n, c;
int solve(int i, int tookElevLast, vector<vector<int>>& dp, vector<int>& elevatorV, vector<int>& stairV, vector<int>& res)
{
    if(i == 0) return 0;
    if(dp[i][tookElevLast] != -1) return dp[i][tookElevLast];
    
    int takeElevator = solve(i-1, 1, dp, elevatorV, stairV, res) + elevatorV[i] + (tookElevLast ? 0 : c);
    int takeStairs =solve(i-1, 0, dp, elevatorV, stairV, res) + stairV[i];
    
    return dp[i][tookElevLast] = res[i] = min(takeElevator, takeStairs);
}


int main() 
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);

    cin >> n >> c;
    vector<int>stairV(n), elevatorV(n), res(n);

    for(int i = 1; i < n; i++) cin >> stairV[i];
    for(int i = 1; i < n; i++) cin >> elevatorV[i];

    vector<vector<int>>dp(n, vector<int>(2, -1));
    solve(n-1, 0, dp, elevatorV, stairV, res);

    for(auto i:res) cout << i << " ";
    cout << "\n";
    return 0;
}
//solved with the coach in the session
